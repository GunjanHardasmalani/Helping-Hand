/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DHSSRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.GenerateLogs;
import Business.Organization.DHSSOrganization;
import Business.Organization.OrganizationDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientApprovalWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gunjan
 */
public class ViewPatientRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Enterprise enterprise;
    DHSSOrganization dhssOrganization;
    EcoSystem system;
    UserAccount account;
    private GenerateLogs logs;

    /**
     * Creates new form ViewPatientRequestJPanel
     */
    public ViewPatientRequestJPanel(JPanel userProcessContainer, UserAccount account, OrganizationDirectory organizationDirectory, DHSSOrganization dhssOrganization, Enterprise enterprise, EcoSystem system, GenerateLogs logs) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.dhssOrganization = dhssOrganization;
        this.system = system;
        this.account = account;
        this.logs = logs;
        populateApprovedTable();
        populatePendingTable();

    }

    public void populateApprovedTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblPatientDetailsApproved.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : dhssOrganization.getWorkQueue().getWorkRequestList()) {
            PatientApprovalWorkRequest patientApprovalWorkRequest = (PatientApprovalWorkRequest) request;
            if (patientApprovalWorkRequest.getStatus().equalsIgnoreCase("Approved")) {
                Object[] row = new Object[8];
                row[0] = patientApprovalWorkRequest.getPatientID();
                row[1] = patientApprovalWorkRequest;
                row[2] = patientApprovalWorkRequest.getAge();
                row[3] = patientApprovalWorkRequest.getSSN();
                row[4] = patientApprovalWorkRequest.getZipcode();
                row[5] = patientApprovalWorkRequest.getStatus();
                row[6] = request.getSender().getEmployee().getName();
                row[7] = request.getRequestDate();

                dtm.addRow(row);
            }
        }
    }

    public void populatePendingTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblPatientDetailsPending.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : dhssOrganization.getWorkQueue().getWorkRequestList()) {
            PatientApprovalWorkRequest patientApprovalWorkRequest = (PatientApprovalWorkRequest) request;
            if (patientApprovalWorkRequest.getStatus().equalsIgnoreCase("Pending")) {
                Object[] row = new Object[8];
                row[0] = patientApprovalWorkRequest.getPatientID();
                row[1] = patientApprovalWorkRequest;
                row[2] = patientApprovalWorkRequest.getAge();
                row[3] = patientApprovalWorkRequest.getSSN();
                row[4] = patientApprovalWorkRequest.getZipcode();
                row[5] = patientApprovalWorkRequest.getStatus();
                row[6] = request.getSender().getEmployee().getName();
                row[7] = request.getRequestDate();

                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDetailsPending = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnDecline = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPatientDetailsApproved = new javax.swing.JTable();
        lblPendingRequests = new javax.swing.JLabel();
        lblApprovedRequests = new javax.swing.JLabel();

        setBackground(new java.awt.Color(251, 251, 251));

        tblPatientDetailsPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Age", "SSN", "Zipcode", "Status", "Volunteer Name", "TimeStamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientDetailsPending);
        if (tblPatientDetailsPending.getColumnModel().getColumnCount() > 0) {
            tblPatientDetailsPending.getColumnModel().getColumn(0).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(1).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(2).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(3).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(4).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(5).setResizable(false);
            tblPatientDetailsPending.getColumnModel().getColumn(7).setResizable(false);
        }

        btnApprove.setBackground(new java.awt.Color(251, 251, 251));
        btnApprove.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnDecline.setBackground(new java.awt.Color(251, 251, 251));
        btnDecline.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnDecline.setText("Decline");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });

        tblPatientDetailsApproved.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Age", "SSN", "Zipcode", "Status", "Volunteer Name", "TimeStamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblPatientDetailsApproved);
        if (tblPatientDetailsApproved.getColumnModel().getColumnCount() > 0) {
            tblPatientDetailsApproved.getColumnModel().getColumn(0).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(1).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(2).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(3).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(4).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(5).setResizable(false);
            tblPatientDetailsApproved.getColumnModel().getColumn(7).setResizable(false);
        }

        lblPendingRequests.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lblPendingRequests.setText("Pending Requests");

        lblApprovedRequests.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lblApprovedRequests.setText("Approved Requests");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(btnApprove)
                        .addGap(218, 218, 218)
                        .addComponent(btnDecline)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblApprovedRequests)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPendingRequests)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblPendingRequests)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApprove)
                    .addComponent(btnDecline))
                .addGap(18, 18, 18)
                .addComponent(lblApprovedRequests)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblPatientDetailsPending.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to approve the patient request ?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                for (WorkRequest request : dhssOrganization.getWorkQueue().getWorkRequestList()) {
                    PatientApprovalWorkRequest patientApprovalWorkRequest = (PatientApprovalWorkRequest) request;
                    PatientApprovalWorkRequest patient = (PatientApprovalWorkRequest) tblPatientDetailsPending.getValueAt(selectedRow, 1);
                    if (patientApprovalWorkRequest.getSSN().equals(patient.getSSN())) {
                        patientApprovalWorkRequest.setStatus("Approved");
                        try {
                            logs.generateLogs(ViewPatientRequestJPanel.class.getName(), patientApprovalWorkRequest.getPatientName() + " request approved");
                        } catch (IOException ex) {
                            Logger.getLogger(ViewPatientRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        populatePendingTable();
                        populateApprovedTable();
                        break;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        int selectedRow = tblPatientDetailsPending.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to decline the patient request ?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                for (WorkRequest request : dhssOrganization.getWorkQueue().getWorkRequestList()) {
                    PatientApprovalWorkRequest patientApprovalWorkRequest = (PatientApprovalWorkRequest) request;
                    PatientApprovalWorkRequest patient = (PatientApprovalWorkRequest) tblPatientDetailsPending.getValueAt(selectedRow, 1);
                    if (patientApprovalWorkRequest.getSSN().equals(patient.getSSN())) {
                        patientApprovalWorkRequest.setStatus("Declined");
                        try {
                            logs.generateLogs(ViewPatientRequestJPanel.class.getName(), patientApprovalWorkRequest.getPatientName() + " request declined");
                                    } catch (IOException ex) {
                            Logger.getLogger(ViewPatientRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        populatePendingTable();
                        populateApprovedTable();
                        break;
                    }

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row from table first", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeclineActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnDecline;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblApprovedRequests;
    private javax.swing.JLabel lblPendingRequests;
    private javax.swing.JTable tblPatientDetailsApproved;
    private javax.swing.JTable tblPatientDetailsPending;
    // End of variables declaration//GEN-END:variables
}
